." Text automatically generated by txt2man
.TH "untitled" "" "December 29, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." set smaller margin and spacing options
.ta T 0.2i
.nr IN 0.2i
." -----------------------------------------------------------------
.SH NAME
\fBnew\fP(1) - the \fBfpm\fP(1) subcommand to initialize a new project
.SH SYNOPSIS
\fBfpm\fP \fInew\fP \fINAME\fP [[-\fB-lib\fP|\fB--src\fP] [-\fB-app\fP] [-\fB-test\fP] [-\fB-example\fP]]|
[-\fB-full\fP|\fB--bare\fP][-\fB-backfill\fP]
\fBfpm\fP \fInew\fP \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
"\fBfpm\fP \fInew\fP" creates and populates a \fInew\fP programming project directory.
It
.RS
.IP \(bu 3
creates a directory with the specified name
.IP \(bu 3
runs the command "git init" in that directory
.IP \(bu 3
populates the directory with the default project directories
.IP \(bu 3
adds sample Fortran source files
.RE
.PP
The default file structure (that will be automatically scanned) is
.PP
.nf
.fam C
     NAME/
       fpm.toml
       src/
           NAME.f90
       app/
           main.f90
       test/
           check.f90
       example/
           demo.f90

.fam T
.fi
Using this file structure is highly encouraged, particularly for
small packages primarily intended to be used as dependencies.
.PP
If you find this restrictive and need to customize the package
structure you will find using the \fB--full\fP switch creates a
heavily annotated manifest file with references to documentation
to aid in constructing complex package structures.
.PP
Remember to update the information in the sample "fpm.toml"
file with your name and e-mail address.
.SH OPTIONS
.TP
.B \fINAME\fP
the name of the project directory to create. The name
must be made of up to 63 ASCII letters, digits, underscores,
or hyphens, and start with a letter.
.PP
The default is to create the src/, app/, and test/ directories.
If any of the following options are specified then only the
selected subdirectories are generated:
.TP
.B \fB--lib\fP,\fB--src\fP
create directory src/ and a placeholder module
named "NAME.f90" for use with subcommand "build".
.TP
.B \fB--app\fP
create directory app/ and a placeholder main
program for use with subcommand "run".
.TP
.B \fB--test\fP
create directory test/ and a placeholder program
for use with the subcommand "test". Note that sans
"\fB--lib\fP" it really does not have anything to test.
.TP
.B \fB--example\fP
create directory example/ and a placeholder program
for use with the subcommand "run \fB--example\fP".
It is only created by default if "\fB--full\fP is" specified.
.PP
So the default is equivalent to
.PP
.nf
.fam C
    fpm NAME --lib --app --test

.fam T
.fi
.TP
.B \fB--backfill\fP
By default the directory must not exist. If this
option is present the directory may pre-exist and
only subdirectories and files that do not
already exist will be created. For example, if you
previously entered "\fBfpm\fP \fInew\fP myname \fB--lib\fP" entering
"\fBfpm\fP \fInew\fP myname \fB-full\fP \fB--backfill\fP" will create any missing
app/, example/, and test/ directories and programs.
.TP
.B \fB--full\fP
By default a minimal manifest file ("fpm.toml") is
created that depends on auto-discovery. With this
option a much more extensive manifest sample is written
and the example/ directory is created and populated.
It is designed to facilitate creating projects that
depend extensively on non-default build options.
.TP
.B \fB--bare\fP
A minimal manifest file ("fpm.toml") is created and
"README.md" file is created but no directories or
sample Fortran are generated.
.TP
.B \fB--help\fP
print this help and exit
.TP
.B \fB--version\fP
print program version information and exit
.SH EXAMPLES
Sample use
.PP
.nf
.fam C
   fpm new myproject  # create new project directory and seed it
   cd myproject       # Enter the new directory
   # and run commands such as
   fpm build
   fpm run            # run lone example application program
   fpm test           # run example test program(s)
   fpm run --example  # run lone example program

   fpm new A --full # create example/ and an annotated fpm.toml as well
   fpm new A --bare # create no directories
   create any missing files in current directory
   fpm new --full --backfill

