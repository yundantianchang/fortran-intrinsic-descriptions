NAME

SIGN(3) - [NUMERIC] Sign copying function

SYNTAX

    result = sign(a, b)

        elemental function sign(a, b)
        type(TYPE(kind=KIND))            :: sign
        type(TYPE(kind=KIND)),intent(in) :: a, b

where TYPE may be _real_ or _integer_ and KIND is any supported kind for
the type. ```

DESCRIPTION

SIGN(a,b) returns the value of A with the sign of B.

For processors that distinguish between positive and negative zeros
SIGN() may be used to distinguish between REAL values 0.0 and −0.0. SIGN
(1.0, -0.0) will return −1.0 when a negative zero is distinguishable.

    29  1 Description. Magnitude of A with the sign of B.

ARGUMENTS

    A
        Shall be of type _integer_ or _real_

    B
        Shall be of the same type and kind as A

RETURNS

The kind of the return value is the magnitude of A with the sign of B.
That is,

     -  If __b \>= 0__ then the result is __abs(a)__
     -  else if __b < 0__ it is -__abs(a)__.
     - if __b__ is _real_ and the processor distinguishes between __-0.0__ and __0.0__ then the
       result is __-abs(a)__

EXAMPLES

Sample program:

    program demo_sign
    implicit none
       print *,  sign( -12,  1 )
       print *,  sign( -12,  0 )
       print *,  sign( -12, -1 )

       print *,  sign( -12.0, [1.0, 0.0, -1.0] )

       print *,  'can I distinguise 0 from -0? ', sign( 1.0, -0.0 ) .ne. sign( 1.0, 0.0 )
    end program demo_sign

Results:

                 12
                 12
                -12
          12.00000       12.00000      -12.00000
        can I distinguise 0 from -0?  F

STANDARD

FORTRAN 77 and later

fortran-lang intrinsic descriptions (license: MIT)
