NAME

GET_ENVIRONMENT_VARIABLE(3) - [SYSTEM:ENVIRONMENT] Get an environmental
variable

SYNTAX

      call get_environment_variable(name, value, length, status, trim_name)

       character(len=*),intent(in) :: name
       character(len=*),intent(out),optional :: value
       integer,intent(out),optional :: length
       integer,intent(out),optional :: status
       logical,intent(out),optional :: trim_name

DESCRIPTION

Get the VALUE of the environmental variable NAME.

Note that GET_ENVIRONMENT_VARIABLE(3) need not be thread-safe. It is the
responsibility of the user to ensure that the environment is not being
updated concurrently.

OPTIONS

    NAME
        The name of the environment variable to query.

    Shall be a scalar of type _character_ and of default kind.

RETURNS

    VALUE
        The value of the environment variable being queried.

    Shall be a scalar of type _character_ and of default kind. The value
    of NAME is stored in VALUE. If VALUE is not large enough to hold the
    data, it is truncated. If NAME is not set, VALUE will be filled with
    blanks.

    LENGTH
        Argument LENGTH contains the length needed for storing the
        environment variable NAME or zero if it is not present.

    Shall be a scalar of type _integer_ and of default kind.

    STATUS
        STATUS is -1 if VALUE is present but too short for the
        environment variable; it is 1 if the environment variable does
        not exist and 2 if the processor does not support environment
        variables; in all other cases STATUS is zero.

    Shall be a scalar of type _integer_ and of default kind.

    TRIM_NAME
        If TRIM_NAME is present with the value .FALSE., the trailing
        blanks in NAME are significant; otherwise they are not part of
        the environment variable name.

    Shall be a scalar of type _logical_ and of default kind.

EXAMPLES

Sample program:

    program demo_getenv
    implicit none
    character(len=:),allocatable :: homedir
    character(len=:),allocatable :: var
         var='HOME'
         homedir=get_env(var)
         write (*,'(a,"=""",a,"""")')var,homedir

    contains

    function get_env(NAME,DEFAULT) result(VALUE)
    ! a function that makes calling get_environment_variable(3) simple
    implicit none
    character(len=*),intent(in)          :: NAME
    character(len=*),intent(in),optional :: DEFAULT
    character(len=:),allocatable         :: VALUE
    integer                              :: howbig
    integer                              :: stat
    integer                              :: length
       ! get length required to hold value
       length=0
       VALUE=''
       if(NAME.ne.'')then
          call get_environment_variable( &
          & NAME, length=howbig,status=stat,trim_name=.true.)
          select case (stat)
          case (1)
           !*!print *, NAME, " is not defined in the environment. Strange..."
           VALUE=''
          case (2)
           !*!print *, &
           !*!"This processor does not support environment variables. Boooh!"
           VALUE=''
          case default
           ! make string to hold value of sufficient size
           if(allocated(VALUE))deallocate(VALUE)
           allocate(character(len=max(howbig,1)) :: VALUE)
           ! get value
           call get_environment_variable( &
           & NAME,VALUE,status=stat,trim_name=.true.)
           if(stat.ne.0)VALUE=''
          end select
       endif
       if(VALUE.eq.''.and.present(DEFAULT))VALUE=DEFAULT
    end function get_env

    end program demo_getenv

Typical Results:

       HOME="/home/urbanjs"

STANDARD

Fortran 2003 and later

fortran-lang intrinsic descriptions (@urbanjost)
